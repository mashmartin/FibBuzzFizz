/** @file FibonacciInterpt.h
 *	 @brief This class uses FibonacciGen for Fibonacci sequence generation. It
 *	        interprets the numbers according to divisibility.
 *
 *  @author Martin Ma
 *  @date   Oct 7, 2015
 *
 *  Copyright 2015. All rights reserved.
 */

#ifndef FIBONACCIINTERPT_H_
#define FIBONACCIINTERPT_H_

#include <string>

#include "FibonacciGen.h"

using namespace std;

class FibonacciInterpt: public FibonacciGen {
public:
	FibonacciInterpt();
	virtual ~FibonacciInterpt();

   /**
		Print n terms of the interpreted Fibonacci sequence. The sequence is generated by FibonacciGen.

     	@param[in] n 			Number of terms in the sequence to print. Default = 1.
      @param[in] batchSize Maximum number of terms generated in each batch. Default = 32.
    */
	void PrintNextInBatches(unsigned long long const n = 1, unsigned long long const batchSize = 32);

protected:
   /**
		Interpret a number according to the following rules:
			1. Return "Buzz " when the input is divisible by 3.
			2. Return "Fizz" when the input is divisible by 5.
			3. Return "Buzz Fizz" when the input is divisible by both 3 and 5.
			4. Return "BuzzFizz" when the input is a prime.
			5. Return the number in string type when the input does not fit Rules 1 to 4.

     	@param[in] n The integer value to be interpreted.

      @return The interpreted string.
    */
	string Fib2BuzzFizz(unsigned long long fib);

   /**
		Determine if the input parameter is a prime.

     	@param[in] n The number to be tested.

      @return true if n is prime; false otherwise.
    */
	bool IsPrime(unsigned long long n);
};

#endif /* FIBONACCIINTERPT_H_ */
